import path from 'path';
import fs from 'fs/promises';
import randomstring from 'randomstring';
import chalk from 'chalk';
import logger from '../../../utils/logger.js';
import { BaseCommandHandler } from '../utils/BaseCommandHandler.js';
const DEFAULT_ENVS = {
    DATABASE_URL: '',
    DATABASE_DIALECT: '',
    DATABASE_NAME: '',
    DATABASE_HOST: '',
    DATABASE_USER: '',
    DATABASE_PASSWORD: '',
    COOKIE_SECRET: '',
    PORT: 3000,
};
export class EnvironmentVariablesHandler extends BaseCommandHandler {
    environmentVariables;
    constructor(options) {
        super(options);
        this.environmentVariables = DEFAULT_ENVS;
        this.set('COOKIE_SECRET', randomstring.generate(32));
        this.merge(options.env);
    }
    async run() {
        logger.info(`Preparing ${chalk.yellow('.env')} file`);
        await this.buildEnvFile();
    }
    set(key, value) {
        this.environmentVariables[key] = value;
    }
    merge(env = {}) {
        Object.keys(env).forEach((name) => {
            const value = env[name];
            if (value !== '') {
                this.environmentVariables[name] = value;
            }
        });
    }
    getAll() {
        return this.environmentVariables;
    }
    async buildEnvFile() {
        const contents = Object.entries(this.environmentVariables).map(([key, value]) => `${key}=${value}`).join('\n');
        const destination = path.join(process.cwd(), this.options.projectName, '.env');
        await fs.writeFile(destination, contents, 'utf8');
    }
}
