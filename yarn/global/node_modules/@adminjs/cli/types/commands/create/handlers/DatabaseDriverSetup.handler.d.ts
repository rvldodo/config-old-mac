import { CreateCommandInput } from '../types.js';
import { BaseCommandHandler } from '../utils/BaseCommandHandler.js';
import { EnvironmentVariablesHandler } from './EnvironmentVariables.handler.js';
export declare const DB_DRIVERS_LIBRARIES: {
    postgres: "pg";
    mariadb: "mariadb";
    mysql: "mysql2";
    sqlite: "sqlite3";
    sqljs: "sql.js";
    oracle: "oracledb";
    mssql: "mssql";
    mongodb: "mongodb";
};
export declare const ADAPTER_TO_DB_DIALECTS_MAPPING: {
    mikroorm: {
        postgres: string;
        mysql: string;
        mariadb: string;
        mongodb: string;
        sqlite: string;
    };
    objection: {
        postgres: string;
        mysql: string;
        sqlite: string;
    };
    prisma: {
        postgres: string;
        mysql: string;
        mssql: string;
        mongodb: string;
        sqlite: string;
    };
    sequelize: {
        postgres: string;
        mysql: string;
        mariadb: string;
        sqlite: string;
    };
    sql: {
        postgres: string;
        mysql: string;
    };
    typeorm: {
        postgres: string;
        mariadb: string;
        mysql: string;
        mysql2: string;
        sqlite: string;
        sqljs: string;
        oracle: string;
        mssql: string;
    };
};
export interface DriverInfo {
    driverLibrary: typeof DB_DRIVERS_LIBRARIES[keyof typeof DB_DRIVERS_LIBRARIES];
    dialectName: string;
}
export declare class DatabaseDriverSetupHandler extends BaseCommandHandler<CreateCommandInput> {
    protected driverLibrary: typeof DB_DRIVERS_LIBRARIES[keyof typeof DB_DRIVERS_LIBRARIES];
    protected dialectName: string;
    private environmentVariablesHandler;
    constructor(options: CreateCommandInput, environmentVariablesHandler: EnvironmentVariablesHandler);
    run(): Promise<void>;
    getDriverInfo(): DriverInfo;
    protected addDependencyForDriver(): Promise<void>;
}
